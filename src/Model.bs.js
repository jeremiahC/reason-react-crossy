// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Player = /* module */[];

var Board = /* module */[];

var Car = /* module */[];

var initial_state_000 = /* playerPosition : tuple */[
  0,
  0
];

var initial_state_001 = /* carPost : tuple */[
  1,
  0
];

var initial_state_002 = /* ground */$$Array.make_matrix(15, 9, 0);

var initial_state = /* record */[
  initial_state_000,
  initial_state_001,
  initial_state_002,
  /* count */0
];

function changePoint(point, axis, func) {
  console.log(0 <= point);
  switch (axis) {
    case "xaxis" : 
        if (point <= 0) {
          return point + 1 | 0;
        } else if (point < 8) {
          return Curry._2(func, point, 1);
        } else if (point === 8) {
          return point - 1 | 0;
        } else {
          return Curry._2(func, point, 0);
        }
    case "yaxis" : 
        if (point <= 0) {
          return point + 1 | 0;
        } else if (point < 14) {
          return Curry._2(func, point, 1);
        } else if (point === 14) {
          return point - 1 | 0;
        } else {
          return Curry._2(func, point, 0);
        }
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Model.re",
              37,
              8
            ]
          ];
  }
}

function reducer(state, action) {
  var match = state[/* playerPosition */0];
  var x = match[1];
  var y = match[0];
  var match$1 = state[/* carPost */1];
  var car_y = match$1[0];
  switch (action) {
    case "down" : 
        Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], y), x, 0);
        var y$1 = changePoint(y, "yaxis", (function (prim, prim$1) {
                return prim + prim$1 | 0;
              }));
        return /* record */[
                /* playerPosition : tuple */[
                  y$1,
                  x
                ],
                /* carPost */state[/* carPost */1],
                /* ground */state[/* ground */2],
                /* count */state[/* count */3]
              ];
    case "left" : 
        Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], y), x, 0);
        var x$1 = changePoint(x, "xaxis", (function (prim, prim$1) {
                return prim - prim$1 | 0;
              }));
        return /* record */[
                /* playerPosition : tuple */[
                  y,
                  x$1
                ],
                /* carPost */state[/* carPost */1],
                /* ground */state[/* ground */2],
                /* count */state[/* count */3]
              ];
    case "right" : 
        Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], y), x, 0);
        var x$2 = changePoint(x, "xaxis", (function (prim, prim$1) {
                return prim + prim$1 | 0;
              }));
        return /* record */[
                /* playerPosition : tuple */[
                  y,
                  x$2
                ],
                /* carPost */state[/* carPost */1],
                /* ground */state[/* ground */2],
                /* count */state[/* count */3]
              ];
    case "runCar" : 
        var count = state[/* count */3];
        Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], car_y), count, 2);
        if (count !== 0) {
          Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], car_y), count - 1 | 0, 0);
        }
        var match$2 = count < 8;
        return /* record */[
                /* playerPosition */state[/* playerPosition */0],
                /* carPost */state[/* carPost */1],
                /* ground */state[/* ground */2],
                /* count */match$2 ? count + 1 | 0 : 0
              ];
    case "up" : 
        Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* ground */2], y), x, 0);
        var y$2 = changePoint(y, "yaxis", (function (prim, prim$1) {
                return prim - prim$1 | 0;
              }));
        return /* record */[
                /* playerPosition : tuple */[
                  y$2,
                  x
                ],
                /* carPost */state[/* carPost */1],
                /* ground */state[/* ground */2],
                /* count */state[/* count */3]
              ];
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Model.re",
              67,
              24
            ]
          ];
  }
}

var State = /* module */[
  /* initial_state */initial_state,
  /* changePoint */changePoint,
  /* reducer */reducer
];

exports.Player = Player;
exports.Board = Board;
exports.Car = Car;
exports.State = State;
/* initial_state Not a pure module */
